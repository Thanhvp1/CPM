// G·ª≠i tin nh·∫Øn ƒë·∫øn webhook n8n
async function sendChatMessage(message) {
    try {
        const response = await fetch('https://workflow.mecode.pro/webhook/chatbot-cpm', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message: message })
        });

        const replyText = await response.text();
        displayChatResponse(replyText, 'bot'); // G·ª≠i sang displayChatResponse

    } catch (error) {
        console.error('L·ªói g·ª≠i tin nh·∫Øn:', error);
        displayChatResponse('‚ö†Ô∏è ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
    }
}

// Hi·ªÉn th·ªã tin nh·∫Øn trong giao di·ªán
function displayChatResponse(message, sender = 'bot') {
    const chatWindow = document.getElementById('chat-window');
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('chat-message');

    if (sender === 'user') {
        messageDiv.classList.add('user-message');
        messageDiv.textContent = `üë§ B·∫°n: ${message}`;
    } else {
        messageDiv.classList.add('bot-message');
        const html = marked.parse(message); // Chuy·ªÉn Markdown th√†nh HTML
        messageDiv.innerHTML = `ü§ñ Chatbot:<br>${html}`;
    }

    chatWindow.appendChild(messageDiv);
    chatWindow.scrollTop = chatWindow.scrollHeight;
}

// X·ª≠ l√Ω n√∫t g·ª≠i
document.getElementById('send-btn').addEventListener('click', () => {
    const inputField = document.getElementById('chat-message');
    const userMessage = inputField.value.trim();

    if (userMessage !== '') {
        displayChatResponse(userMessage, 'user');
        sendChatMessage(userMessage);
        inputField.value = '';
    }
});

// Cho ph√©p nh·∫•n Enter
document.getElementById('chat-message').addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
        event.preventDefault();
        document.getElementById('send-btn').click();
    }
});
